<?php

/**
 * Implements hook_menu().
 */
function araport_downloads_menu(){
  $items = array();

  $items['downloads'] = array(
    'title' => 'Downloads',
    'description' => '',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'araport_downloads_view',
    'access arguments' => array('access araport datasets')
  );

  $items['download_file'] = array(
    'title' => 'Downloads',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'araport_download_file',
    'access arguments' => array('download araport datasets')
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function araport_downloads_permission(){
  $perms = array();

  $perms['access araport datasets'] = array(
    'title' => 'Browse hosted datasets',
    'description' => 'Users with this permission can browse publicly hosted AIP datasets.',
  );

  $perms['download araport datasets'] = array(
    'title' => 'Download hosted datasets',
    'description' => 'Users with this permission can download publicly hosted AIP datasets.',
  );

  return $perms;
}

function _araport_download_stream($ch, $data) {
  print $data;
  return strlen($data);
}

/**
 * It would be nice to not have to do the CURL opts here, but APIClient only
 * supports JSON at this time.
 */
function araport_download_file(){
  global $user;
  $args = func_get_args();
  if (count($args)) {
    // Waiting for the WORLD/GUEST user/role to be working.
    // In the interim, instead of using the user's own token we'll use the
    // "master" token configured for the Gateway DNA install.
    // https://jira.araport.org/browse/WSD-60
    // $token = agave_load_api_token($user);
    // $accessToken = $token->getAccessToken();
    $accessToken = variable_get('agave_tenant_token', '');
    // end master token edit
    $url = variable_get('agave_tenant_base_url', '') . '/files/v2/media/system/araport-public-files/' . implode('/', $args);
    $name = array_pop($args);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $accessToken));
    curl_setopt($ch, CURLOPT_SSLVERSION,3);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_WRITEFUNCTION, '_araport_download_stream');

    drupal_add_http_header('Content-disposition', 'attachment; filename='.$name);

    curl_exec($ch);
    curl_close($ch);
    drupal_exit();

  } else {
    drupal_not_found();
  }
}

function araport_downloads_get_token() {
  global $user;
  if ($user->uid) {
    // Waiting for the WORLD/GUEST user/role to be working.
    // In the interim, instead of using the user's own token we'll use the
    // "master" token configured for the Gateway DNA install.
    // https://jira.araport.org/browse/WSD-60
    // $token = agave_load_api_token($user);
    // return $token->getAccessToken();
    return variable_get('agave_tenant_token', '');
  } else {
    // use master token to allow browsing
    return variable_get('agave_tenant_token', '');
  }
}

function araport_downloads_view(){

  drupal_add_js(drupal_get_path('module','araport_downloads').'/araport_downloads.js');

  $path = '/';
  $args = func_get_args();
  if (count($args)) {
    $path = $path . implode('/', $args);
  }

  $apiToken = araport_downloads_get_token();
  $apiServer = variable_get('agave_tenant_base_url', '');
  $client = new APIClient($apiToken, $apiServer);
  $listing = new AgaveFileListing($client, 'araport-public-files', $path);
  if ($list = $listing->getList()) {
    $breadcrumbs = array();
    $crumb = '';
    $breadcrumbs[] = l('$ROOT', 'downloads');
    foreach ($args as $arg) {
      $crumb .= '/' . $arg;
      $breadcrumbs[] = l($arg, 'downloads'.$crumb);
    }


    return array(
      'info' => array(
        '#markup' => '<p class="lead">Hosted files and datasets available for download.</p>'
      ),
      'fsnav' => array(
        '#markup' => '<ol class="breadcrumb"><li>'.implode('</li><li>', $breadcrumbs).'</li></ol>'
      ),
      'file_listing' => array(
        '#theme' => 'araport_downloads_listing',
        '#listing' => $list,
        '#open_directories' => TRUE
      )
    );
  } else {
    drupal_set_message('An unexpected error occurred. We are unable to display datasets at this time.', 'error');
    return '';
  }
}

function araport_downloads_theme() {
  return array(
    'araport_downloads_listing' => array(
      'variables' => array(
        'listing' => array(),
        'open_directories' => FALSE
      )
    ),
    'araport_downloads_directory' => array(
      'variables' => array('dir' => NULL)
    ),
    'araport_downloads_file' => array(
      'variables' => array('file' => NULL)
    )
  );
}

function theme_araport_downloads_listing($variables) {
  $listing = $variables['listing'];

  $open_directories = $variables['open_directories'];
  $items = array();
  foreach ($listing as $item) {
    $render = array();
    if ($item->name == '.') {
      continue;
    }
    if ($item->type == 'dir') {
      $render['#theme'] = 'araport_downloads_directory';
      $render['#dir'] = $item;
      if ($open_directories) {
        $apiToken = araport_downloads_get_token();
        $apiServer = variable_get('agave_tenant_base_url', '');
        $client = new APIClient($apiToken, $apiServer);
        $dir_contents = new AgaveFileListing($client, 'araport-public-files', '/'.$item->path);
        $render = array(
          'dir' => $render,
          'contents' => array(
            '#theme' => 'araport_downloads_listing',
            '#listing' => $dir_contents->getList()
          )
        );
      }
    } else {
      $render['#theme'] = 'araport_downloads_file';
      $render['#file'] = $item;
    }
    $items[] = drupal_render($render);
  }

  $render = array(
    '#theme' => 'item_list',
    '#items' => $items
  );
  return drupal_render($render);
}

function theme_araport_downloads_directory($variables) {
  $path = ltrim($variables['dir']->path, '/');
  return l('<i class="fa fa-folder"></i> ' . $variables['dir']->name, 'downloads/' . $path, array('html' => TRUE));
}

function _araport_downloads_human_filesize($bytes, $decimals = 2) {
  $size   = array('bytes','kB','MB','GB','TB','PB','EB','ZB','YB');
  $factor = floor((strlen($bytes) - 1) / 3);

  return sprintf("%.{$decimals}f", $bytes/pow(1024, $factor)).' '.@$size[$factor];
}

function theme_araport_downloads_file($variables) {
  global $user;
  $file = $variables['file'];
  $path = ltrim($file->path, '/');
  if (user_access('download araport datasets')) {

    // build cURL command for data-araport-curl attribute
    $token = agave_load_api_token($user);
    $accessToken = $token->getAccessToken();
    $curl_cmd = "curl -sO -H 'Authorization: Bearer $accessToken' ".$file->_links->self->href;

    $output = l('<i class="fa fa-file"></i> ' . $file->name, 'download_file/' . $path, array('html' => TRUE, 'attributes' => array('data-araport-curl' => $curl_cmd)));
  } else {
    $output = '<i class="fa fa-file"></i> ' . $file->name;
    $output .= ' (' . l('Login to download', 'user/login', array('query' => array('destination' => 'downloads/' . $path))) . ')';
  }
  $size = '<small class="text-muted">'._araport_downloads_human_filesize($file->length).'</small>';
  return $output.' '.$size;
}
